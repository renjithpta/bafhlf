#############################################################################################
# This role setups communication between the vault and kubernetes cluster and install 
# neccessary configurations.
#############################################################################################

# Check if namespace created
- name: "Waiting for the namespace {{ item.name | lower }}-net to be created"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/k8_component"
  vars:
    component_type: "Namespace"
    component_name: "{{ item.name | lower }}-net"
    type: "retry"

# This task checks if the vault path already exists
- name: "Checking if the vault path already exists"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    check: "vault_auth"

- name: "Set Variable"
  set_fact:
    auth_list: "{{ auth_lists }}"

# Set vault_auth_status variable to false initially
- set_fact:
    vault_auth_status: false
    component_auth_temp: "\"{{ auth_path }}/\""

# Set vault_auth_status variable to true if found
- set_fact:
    vault_auth_status: true
  loop: "{{ auth_lists.stdout_lines }}"
  loop_control:
    loop_var: itemx
  when: itemx == component_auth_temp

# This task checks if the vault-ro polict already exists
- name: "Checking if the vault policies already exists"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    check: "vault_policies"
  register: vault_policy_result
  ignore_errors: yes

# Set vault_policy_temp to vault_policy_result.failed (True or False)
- set_fact:
    vault_policy_temp: "{{ vault_policy_result.failed }}"

############################################################################################
# This task creates the build temp direcotry
# Ensures the build directory
- name: "Creating the build directory"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    path: "./build"
    check: "ensure_dir"

#####################################################################################################################
# This task creates the docker pull credentials for image registry
- name: "Create vault_kubernetes secret"
  include_role:
    name: create/k8s_secrets
  vars: 
    namespace: "{{ item.name | lower}}-net"
    kubernetes: "{{ item.k8s }}"
    check: "docker_credentials"

#############################################################################################
# This task creates secrets for the root token and the reviewer token
- name: "Create vault_kubernetes secrets tokens"
  include_role:
    name: create/k8s_secrets
  vars: 
    namespace: "{{ item.name | lower}}-net"
    vault: "{{ item.vault }}"
    kubernetes: "{{ item.k8s }}"
    check: "token_secret"
  
#############################################################################################
# This tasks gets the kubernetes server url
- name: Get the kubernetes server url
  shell: |
    KUBECONFIG={{ kubernetes.config_file }} kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d " "
  register: kubernetes_server_url

#####################################################################################################################
# This tasks generate vault_kubernetes helmrelease file
- name: "Create value file for vault_kubernetes "
  include_role:
    name: helm_component
  vars: 
    name: "{{ item.name | lower }}"   
    type: "vault_kubernetes_job"    
    component_name: "{{ item.name | lower }}-vaultkubernetes-job"
    component_type: "{{ item.type | lower }}"
    component_ns: "{{ item.name | lower }}-net"
    vault_auth: "{{ vault_auth_status }}"
    vault_policy: "{{ vault_policy_temp }}"
    git_url: "{{ item.gitops.git_url }}"
    git_branch: "{{ item.gitops.branch }}"
    charts_dir: "{{ item.gitops.chart_source }}"
    vault: "{{ item.vault }}"
    k8s: "{{ item.k8s }}"
    kubernetes_url: "{{ kubernetes_server_url.stdout }}"
    fabrictools_image: "hyperledger/fabric-tools:{{ network.version }}"
    alpine_image: "{{ network.docker.url }}/alpine-utils:1.0"
    values_dir: "{{playbook_dir}}/../../../{{item.gitops.release_dir}}/{{ item.name | lower }}"
  
#Git Push : Pushes the above generated files to git directory 
- name: Git Push
  include_role: 
    name: "{{ playbook_dir }}/../../shared/configuration/roles/git_push"
  vars:
    GIT_DIR: "{{ playbook_dir }}/../../../"
    gitops: "{{ item.gitops }}"    
    GIT_RESET_PATH: "platforms/hyperledger-fabric/configuration"
    msg: "[ci skip] Pushing vault_kubernetes files"
   
# Check if vault_kubernetes is completed
- name: Check if vault_kubernetes job is completed
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/helm_component"
  vars:
    component_type: Job
    namespace: "{{ item.name | lower}}-net"
    component_name: "{{ item.name | lower}}-vaultkubenertes-job"
    kubernetes: "{{ item.k8s }}"
