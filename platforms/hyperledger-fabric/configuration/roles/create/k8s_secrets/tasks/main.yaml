#############################################################################################
# This role creates the secrets and docker credentials 
#############################################################################################

############################################################################################
# Check if root token secret exist of every organization in their namespace
- name: Check if root token exists in the namespace
  k8s_info:
    kind: Secret
    namespace: "{{ namespace }}"
    name: "roottoken"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: root_token_secret
  when: check == "token_secret"

# ############################################################################################
# # This task put root token of every organization in their namespace
- name: Put root token of every organization
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "roottoken"
        namespace: "{{ namespace }}"
      stringData:
        config.yaml: |-
        token: "{{ vault.root_token }}"
    state: present
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  when: check == "token_secret" and root_token_secret.resources|length == 0 

############################################################################################
# Check if reviewer token secret exist of every organization in their namespace
- name: Check if reviewer token exists in the namespace
  k8s_info:
    kind: Secret
    namespace: "{{ namespace }}"
    name: "reviewertoken"
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: reviewer_token_secret
  when: check == "token_secret"

############################################################################################
# This task put reviewer token of every organization in their namespace
- name: Put reviewer token of every organization
  shell: |
    export REVIEWER_TOKEN=$(KUBECONFIG={{ kubernetes.config_file }} kubectl get secret $(KUBECONFIG={{ kubernetes.config_file }} kubectl get serviceaccount -n {{ namespace }} vault-reviewer -o jsonpath={.secrets[0].name}) -n {{ namespace }} -o  jsonpath={.data.token} | base64 -d)
    kubectl create secret generic reviewertoken --from-literal=reviewer="$REVIEWER_TOKEN" --namespace {{ namespace }}
  when: check == "token_secret" and reviewer_token_secret.resources|length == 0 

#####################################################################################################################
# Check if Docker credentials exist already
- name: "Checking if the docker credentials already exists"
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/setup"
  vars:
    check: "docker_credentials"
  register: get_regcred
  when: check == "docker_credentials"

- set_fact:
    auth: "{{network.docker.username}}:{{network.docker.password}}"
  when: check == "docker_credentials" and  get_regcred.resources|length == 0

- set_fact:
    auth_64: "{{auth | b64encode}}" 
  when: check == "docker_credentials" and  get_regcred.resources|length == 0

- set_fact:
    dockerconfigjson: "{\"auths\":{\"{{network.docker.url}}\":{\"username\":\"{{network.docker.username}}\",\"password\":\"{{network.docker.password}}\",\"email\":\"test@abc.mail\",\"auth\":\"{{auth_64}}\"}}}"
  when: check == "docker_credentials" and  get_regcred.resources|length == 0

#####################################################################################################################
# This task creates the docker pull credentials for image registry
- name: Create the docker pull credentials
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "regcred"
        namespace: "{{ namespace }}"
      type: kubernetes.io/dockerconfigjson 
      data:
        .dockerconfigjson: "{{ dockerconfigjson | to_json | b64encode }}"
    state: present
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  when: check == "docker_credentials" and  get_regcred.resources|length == 0

############################################################################################
# Check if Ambassador credentials exists already
- name: Check Ambassador cred exists
  k8s_info:
    kind: Secret
    namespace: default
    name: ca-{{ component_name }}-ambassador-certs
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  register: get_secret
  when: 
    - check == "ambassador_creds"
    - network.env.proxy == 'ambassador'

#####################################################################################
# This task checks if the CA certs is already present or not
- name: Check if ca certs already created
  shell: |
    vault kv get -field=ca.{{ component_name }}-cert.pem {{ vault.secret_path | default('secretsv2') }}/crypto/{{ component_type }}Organizations/{{ component_name }}/ca
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_capem_result
  changed_when: false
  ignore_errors: yes
  when: 
    - check == "ambassador_creds"
    - network.env.proxy == 'ambassador'

#####################################################################################
# This task checks if the CA key is already present or not
- name: Check if ca key already created
  shell: |
    vault kv get -field={{ component_name }}-CA.key {{ vault.secret_path | default('secretsv2') }}/crypto/{{ component_type }}Organizations/{{ component_name }}/ca
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
  register: vault_cakey_result
  changed_when: false
  ignore_errors: yes
  when: 
    - check == "ambassador_creds"
    - network.env.proxy == 'ambassador'

#####################################################################################################################
# This task creates the Ambassador TLS credentials
- name: Create the Ambassador credentials 
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "ca-{{ component_name }}-ambassador-certs"
        namespace: "default"
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ vault_capem_result.stdout | b64encode  }}"
        tls.key: "{{ vault_cakey_result.stdout | b64encode  }}"
    state: present
    kubeconfig: "{{ kubernetes.config_file }}"
    context: "{{ kubernetes.context }}"
  when: 
    - check == "ambassador_creds"
    - network.env.proxy == 'ambassador'
    - get_secret.resources|length == 0
    - vault_capem_result.failed == False
    - vault_cakey_result.failed == False
